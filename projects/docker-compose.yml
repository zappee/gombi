services:
    # ----- user-services -------------------------------------------------------------------------
    user-service-1:
        image: remal-java-21-postgres-runner:0.6.2
        container_name: user-service-1.${DOMAIN_NAME}
        hostname: user-service-1.${DOMAIN_NAME}
        entrypoint: ["/wait-for-container.sh", "consul.${DOMAIN_NAME}"]
        ports:
            - "14112:22"   # SSH
            - "14113:8000" # JVM debug
            - "14114:8443" # HTTPS
            - "14115:5432" # Postgres
        environment:
            PKI_HOST: pki.${DOMAIN_NAME}
            CONSUL_SERVER_HOSTNAME: consul.${DOMAIN_NAME}
            START_DB: true
            DB_APP_DATABASE: default_db
            DB_APP_USER: application
            DB_APP_PASSWORD: password
            JAVA_OPTS: >
                -XX:+UseContainerSupport
                -XX:MaxRAMPercentage=75.0
                -XX:+UseG1GC
                -XX:MaxGCPauseMillis=100
                -XX:+ParallelRefProcEnabled
                -XX:+UseStringDeduplication
                -XX:+HeapDumpOnOutOfMemoryError
                -XX:+ExitOnOutOfMemoryError
                -XX:HeapDumpPath=/heap-dump
        deploy:
            resources:
                limits:
                    memory: 384M
        volumes:
            - $HOME/Java/gombi/volumes/user-service-1/jar-to-run:/jar-to-run
            - $HOME/Java/gombi/volumes/user-service-1/logs:/logs
            - $HOME/Java/gombi/volumes/user-service-1/heap-dump:/heap-dump

    user-service-2:
        image: remal-java-21-postgres-runner:0.6.2
        container_name: user-service-2.${DOMAIN_NAME}
        hostname: user-service-2.${DOMAIN_NAME}
        entrypoint: ["/wait-for-container.sh", "consul.${DOMAIN_NAME}"]
        ports:
            - "14122:22"   # SSH
            - "14123:8000" # JVM debug
            - "14124:8443" # HTTPS
            - "14125:5432" # Postgres
        environment:
            PKI_HOST: pki.${DOMAIN_NAME}
            CONSUL_SERVER_HOSTNAME: consul.${DOMAIN_NAME}
            START_DB: true
            DB_APP_DATABASE: default_db
            DB_APP_USER: application
            DB_APP_PASSWORD: password
            JAVA_OPTS: >
                -XX:+UseContainerSupport
                -XX:MaxRAMPercentage=75.0
                -XX:+UseG1GC
                -XX:MaxGCPauseMillis=100
                -XX:+ParallelRefProcEnabled
                -XX:+UseStringDeduplication
                -XX:+HeapDumpOnOutOfMemoryError
                -XX:+ExitOnOutOfMemoryError
                -XX:HeapDumpPath=/heap-dump
        deploy:
            resources:
                limits:
                    memory: 384M
        volumes:
            - $HOME/Java/gombi/volumes/user-service-2/jar-to-run:/jar-to-run
            - $HOME/Java/gombi/volumes/user-service-2/logs:/logs
            - $HOME/Java/gombi/volumes/user-service-2/heap-dump:/heap-dump

    # ----- welcome-services ----------------------------------------------------------------------
    welcome-service-1:
        image: remal-java-21-runner:0.6.2
        container_name: welcome-service-1.${DOMAIN_NAME}
        hostname: welcome-service-1.${DOMAIN_NAME}
        entrypoint: ["/wait-for-container.sh", "consul.${DOMAIN_NAME}"]
        ports:
            - "14212:22"   # SSH
            - "14213:8000" # JVM debug
            - "14214:8443" # HTTPS
        environment:
            PKI_HOST: pki.${DOMAIN_NAME}
            CONSUL_SERVER_HOSTNAME: consul.${DOMAIN_NAME}
            JAVA_OPTS: >
                -XX:+UseContainerSupport
                -XX:MaxRAMPercentage=75.0
                -XX:+UseG1GC
                -XX:MaxGCPauseMillis=100
                -XX:+ParallelRefProcEnabled
                -XX:+UseStringDeduplication
                -XX:+HeapDumpOnOutOfMemoryError
                -XX:+ExitOnOutOfMemoryError
                -XX:HeapDumpPath=/heap-dump
        deploy:
            resources:
                limits:
                    memory: 256M
        volumes:
            - $HOME/Java/gombi/volumes/welcome-service-1/jar-to-run:/jar-to-run
            - $HOME/Java/gombi/volumes/welcome-service-1/logs:/logs
            - $HOME/Java/gombi/volumes/welcome-service-1/heap-dump:/heap-dump

    # ----- kafka-producer-services ---------------------------------------------------------------
    kafka-producer-service-1:
        image: remal-java-21-runner:0.6.2
        container_name: kafka-producer-service-1.${DOMAIN_NAME}
        hostname: kafka-producer-service-1.${DOMAIN_NAME}
        entrypoint: ["/wait-for-container.sh", "consul.${DOMAIN_NAME}"]
        ports:
            - "14312:22"   # SSH
            - "14313:8000" # JVM debug
            - "14314:8443" # HTTPS
        environment:
            PKI_HOST: pki.${DOMAIN_NAME}
            CONSUL_SERVER_HOSTNAME: consul.${DOMAIN_NAME}
            JAVA_OPTS: >
                -XX:+UseContainerSupport
                -XX:MaxRAMPercentage=75.0
                -XX:+UseG1GC
                -XX:MaxGCPauseMillis=100
                -XX:+ParallelRefProcEnabled
                -XX:+UseStringDeduplication
                -XX:+HeapDumpOnOutOfMemoryError
                -XX:+ExitOnOutOfMemoryError
                -XX:HeapDumpPath=/heap-dump
        deploy:
            resources:
                limits:
                    memory: 256M
        volumes:
                - $HOME/Java/gombi/volumes/kafka-producer-service-1/jar-to-run:/jar-to-run
                - $HOME/Java/gombi/volumes/kafka-producer-service-1/logs:/logs
                - $HOME/Java/gombi/volumes/kafka-producer-service-1/heap-dump:/heap-dump
        depends_on:
            kafka-4:
                condition: service_healthy
            kafka-5:
                condition: service_healthy
            kafka-6:
                condition: service_healthy
            kafka-7:
                condition: service_healthy

    # ----- kafka-consumer-services ---------------------------------------------------------------
    kafka-consumer-service-1:
        image: remal-java-21-postgres-runner:0.6.2
        container_name: kafka-consumer-service-1.${DOMAIN_NAME}
        hostname: kafka-consumer-service-1.${DOMAIN_NAME}
        entrypoint: ["/wait-for-container.sh", "consul.${DOMAIN_NAME}"]
        ports:
            - "14412:22"   # SSH
            - "14413:8000" # JVM debug
            - "14414:8443" # HTTPS
            - "14415:5432" # Postgres
        environment:
            PKI_HOST: pki.${DOMAIN_NAME}
            CONSUL_SERVER_HOSTNAME: consul.${DOMAIN_NAME}
            START_DB: true
            DB_APP_DATABASE: default_db
            DB_APP_USER: application
            DB_APP_PASSWORD: password
            JAVA_OPTS: >
                -XX:+UseContainerSupport
                -XX:MaxRAMPercentage=75.0
                -XX:+UseG1GC
                -XX:MaxGCPauseMillis=100
                -XX:+ParallelRefProcEnabled
                -XX:+UseStringDeduplication
                -XX:+HeapDumpOnOutOfMemoryError
                -XX:+ExitOnOutOfMemoryError
                -XX:HeapDumpPath=/heap-dump
        deploy:
            resources:
                limits:
                    memory: 384M
        volumes:
            - $HOME/Java/gombi/volumes/kafka-consumer-service-1/jar-to-run:/jar-to-run
            - $HOME/Java/gombi/volumes/kafka-consumer-service-1/logs:/logs
            - $HOME/Java/gombi/volumes/kafka-consumer-service-1/heap-dump:/heap-dump
        depends_on:
            kafka-4:
                condition: service_healthy
            kafka-5:
                condition: service_healthy
            kafka-6:
                condition: service_healthy
            kafka-7:
                condition: service_healthy

    # ----- hazelcast-counter-services ------------------------------------------------------------
    hazelcast-counter-service-1:
        image: remal-java-21-runner:0.6.2
        container_name: hazelcast-counter-service-1.${DOMAIN_NAME}
        hostname: hazelcast-counter-service-1.${DOMAIN_NAME}
        entrypoint: ["/wait-for-container.sh", "consul.${DOMAIN_NAME}"]
        ports:
            - "14512:22"   # SSH
            - "14513:8000" # JVM debug
            - "14514:8443" # HTTPS
        environment:
            PKI_HOST: pki.${DOMAIN_NAME}
            CONSUL_SERVER_HOSTNAME: consul.${DOMAIN_NAME}
            HAZELCAST_CLUSTER_NAME: gombi-dev
            HAZELCAST_CLUSTER_MEMBERS: hazelcast-1.${DOMAIN_NAME}, hazelcast-2.${DOMAIN_NAME}
            JAVA_OPTS: >
                -XX:+UseContainerSupport
                -XX:MaxRAMPercentage=75.0
                -XX:+UseG1GC
                -XX:MaxGCPauseMillis=100
                -XX:+ParallelRefProcEnabled
                -XX:+UseStringDeduplication
                -XX:+HeapDumpOnOutOfMemoryError
                -XX:+ExitOnOutOfMemoryError
                -XX:HeapDumpPath=/heap-dump
        deploy:
            resources:
                limits:
                    memory: 256M
        volumes:
            - $HOME/Java/gombi/volumes/hazelcast-counter-service-1/jar-to-run:/jar-to-run
            - $HOME/Java/gombi/volumes/hazelcast-counter-service-1/logs:/logs
            - $HOME/Java/gombi/volumes/hazelcast-counter-service-1/heap-dump:/heap-dump

    hazelcast-counter-service-2:
        image: remal-java-21-runner:0.6.2
        container_name: hazelcast-counter-service-2.${DOMAIN_NAME}
        hostname: hazelcast-counter-service-2.${DOMAIN_NAME}
        entrypoint: ["/wait-for-container.sh", "consul.${DOMAIN_NAME}"]
        ports:
            - "14522:22"   # SSH
            - "14523:8000" # JVM debug
            - "14524:8443" # HTTPS
        environment:
            PKI_HOST: pki.${DOMAIN_NAME}
            CONSUL_SERVER_HOSTNAME: consul.${DOMAIN_NAME}
            HAZELCAST_CLUSTER_NAME: gombi-dev
            HAZELCAST_CLUSTER_MEMBERS: hazelcast-1.${DOMAIN_NAME}, hazelcast-2.${DOMAIN_NAME}
            JAVA_OPTS: >
                -XX:+UseContainerSupport
                -XX:MaxRAMPercentage=75.0
                -XX:+UseG1GC
                -XX:MaxGCPauseMillis=100
                -XX:+ParallelRefProcEnabled
                -XX:+UseStringDeduplication
                -XX:+HeapDumpOnOutOfMemoryError
                -XX:+ExitOnOutOfMemoryError
                -XX:HeapDumpPath=/heap-dump
        deploy:
            resources:
                limits:
                    memory: 256M
        volumes:
            - $HOME/Java/gombi/volumes/hazelcast-counter-service-2/jar-to-run:/jar-to-run
            - $HOME/Java/gombi/volumes/hazelcast-counter-service-2/logs:/logs
            - $HOME/Java/gombi/volumes/hazelcast-counter-service-2/heap-dump:/heap-dump

    # ----- Hashicorp Consul ----------------------------------------------------------------------
    consul:
        image: remal-consul:0.6.2
        container_name: consul.${DOMAIN_NAME}
        hostname: consul.${DOMAIN_NAME}
        entrypoint: ["/wait-for-container.sh", "pki.${DOMAIN_NAME}"]
        ports:
            - "13102:22"   # SSH
            - "13103:8501" # Consul web console, HTTPS
        environment:
            - PKI_HOST=pki.${DOMAIN_NAME}
        deploy:
            resources:
                limits:
                    memory: 128M

    # ----- Grafana monitoring --------------------------------------------------------------------
    grafana:
        image: remal-grafana:0.6.2
        container_name: grafana.${DOMAIN_NAME}
        hostname: grafana.${DOMAIN_NAME}
        entrypoint: ["/wait-for-container.sh", "prometheus.${DOMAIN_NAME}"]
        ports:
            - "13092:22"   # SSH
            - "13093:3000" # HTTPS
        environment:
            - PKI_HOST=pki.${DOMAIN_NAME}
            - PROMETHEUS_HOST=prometheus.${DOMAIN_NAME}
        deploy:
            resources:
                limits:
                    memory: 128M

    # ----- Prometheus monitoring -----------------------------------------------------------------
    prometheus:
        image: remal-prometheus:0.6.2
        container_name: prometheus.${DOMAIN_NAME}
        hostname: prometheus.${DOMAIN_NAME}
        entrypoint: ["/wait-for-container.sh", "consul.${DOMAIN_NAME}"]
        ports:
            - "13082:22"   # SSH
            - "13083:9090" # HTTPS
        environment:
            - PKI_HOST=pki.${DOMAIN_NAME}
            - CONSUL_HOST=consul.${DOMAIN_NAME}
        deploy:
            resources:
                limits:
                    memory: 128M

    # ----- Hazelcast -----------------------------------------------------------------------------
    hazelcast-1:
        image: remal-hazelcast:0.6.2
        container_name: hazelcast-1.${DOMAIN_NAME}
        hostname: hazelcast-1.${DOMAIN_NAME}
        entrypoint: ["/wait-for-container.sh", "pki.${DOMAIN_NAME}"]
        ports:
            - "13072:22"   # SSH
            - "13073:5701" # Hazelcast client port
        environment:
            - PKI_HOST=pki.${DOMAIN_NAME}
            - HAZELCAST_CLUSTER_NAME=gombi-dev
        deploy:
            resources:
                limits:
                    memory: 256M

    hazelcast-2:
        image: remal-hazelcast:0.6.2
        container_name: hazelcast-2.${DOMAIN_NAME}
        hostname: hazelcast-2.${DOMAIN_NAME}
        entrypoint: ["/wait-for-container.sh", "pki.${DOMAIN_NAME}"]
        ports:
            - "13062:22"   # SSH
            - "13063:5701" # Hazelcast client port
        environment:
            - PKI_HOST=pki.${DOMAIN_NAME}
            - HAZELCAST_CLUSTER_NAME=gombi-dev
        deploy:
            resources:
                limits:
                    memory: 256M

    # ----- Kafka ---------------------------------------------------------------------------------
    #          When you operate Apache Kafka® in KRaft mode, you must set the process.roles
    #          property. This property specifies whether the server acts as a controller, broker,
    #          or both, although currently both is not supported for production workloads. In KRaft
    #          mode, specific Kafka servers are selected to be controllers, storing metadata for
    #          the cluster in the metadata log, and other servers are selected to be brokers. The
    #          servers selected to be controllers will participate in the metadata quorum. Each
    #          controller is either an active or a hot standby for the current active controller.
    #
    #          In a production environment, the controller quorum will be deployed on multiple
    #          nodes. This is called an ensemble. An ensemble is a set of 2n + 1 controllers where
    #          n is any number greater than 0. The odd number of controllers allows the controller
    #          quorum to perform majority elections for leadership. At any given time, there can be
    #          up to n failed servers in an ensemble and cluster will keep quorum. For example,
    #          with three controllers, the cluster can tolerate one controller failure. If at any
    #          time, quorum is lost, the cluster will go down. For production, you should have
    #          typically 3 or 5 controllers, but at least 3.

    # ----- Kafka controllers -----
    kafka-1:
        image: docker.io/apache/kafka:4.0.0
        restart: unless-stopped
        container_name: kafka-1.${DOMAIN_NAME}
        hostname: kafka-1.${DOMAIN_NAME}
        environment:
            KAFKA_CLUSTER_ID: ${KAFKA_CLUSTER_ID}
            KAFKA_NODE_ID: 1
            KAFKA_PROCESS_ROLES: controller
            KAFKA_LISTENERS: CONTROLLER://:9093
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT
            KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
            KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka-1.${DOMAIN_NAME}:9093,2@kafka-2.${DOMAIN_NAME}:9093,3@kafka-3.${DOMAIN_NAME}:9093
            KAFKA_JMX_PORT: 9997
        healthcheck:
            test: /opt/kafka/bin/kafka-cluster.sh list-endpoints --bootstrap-controller localhost:9093
            interval: 60s
            timeout: 10s
            retries: 3
            start_period: 1s
            start_interval: 1s
        deploy:
            resources:
                limits:
                    memory: 384M

    kafka-2:
        image: docker.io/apache/kafka:4.0.0
        restart: unless-stopped
        container_name: kafka-2.${DOMAIN_NAME}
        hostname: kafka-2.${DOMAIN_NAME}
        environment:
            KAFKA_CLUSTER_ID: ${KAFKA_CLUSTER_ID}
            KAFKA_NODE_ID: 2
            KAFKA_PROCESS_ROLES: controller
            KAFKA_LISTENERS: CONTROLLER://:9093
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT
            KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
            KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka-1.${DOMAIN_NAME}:9093,2@kafka-2.${DOMAIN_NAME}:9093,3@kafka-3.${DOMAIN_NAME}:9093
            KAFKA_JMX_PORT: 9997
        healthcheck:
            test: /opt/kafka/bin/kafka-cluster.sh list-endpoints --bootstrap-controller localhost:9093
            interval: 60s
            timeout: 10s
            retries: 3
            start_period: 1s
            start_interval: 1s
        deploy:
            resources:
                limits:
                    memory: 384M

    kafka-3:
        image: docker.io/apache/kafka:4.0.0
        restart: unless-stopped
        container_name: kafka-3.${DOMAIN_NAME}
        hostname: kafka-3.${DOMAIN_NAME}
        environment:
            KAFKA_CLUSTER_ID: ${KAFKA_CLUSTER_ID}
            KAFKA_NODE_ID: 3
            KAFKA_PROCESS_ROLES: controller
            KAFKA_LISTENERS: CONTROLLER://:9093
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT
            KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
            KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka-1.${DOMAIN_NAME}:9093,2@kafka-2.${DOMAIN_NAME}:9093,3@kafka-3.${DOMAIN_NAME}:9093
            KAFKA_JMX_PORT: 9997
        healthcheck:
            test: /opt/kafka/bin/kafka-cluster.sh list-endpoints --bootstrap-controller localhost:9093
            interval: 60s
            timeout: 10s
            retries: 3
            start_period: 1s
            start_interval: 1s
        deploy:
            resources:
                limits:
                    memory: 384M

    # ----- Kafka brokers -----
    kafka-4:
        image: docker.io/apache/kafka:4.0.0
        restart: unless-stopped
        container_name: kafka-4.${DOMAIN_NAME}
        hostname: kafka-4.${DOMAIN_NAME}
        environment:
            KAFKA_CLUSTER_ID: ${KAFKA_CLUSTER_ID}
            KAFKA_NODE_ID: 4
            KAFKA_PROCESS_ROLES: broker
            KAFKA_LISTENERS: INTERNAL://:9092,EXTERNAL://:9094
            KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-4.${DOMAIN_NAME}:9092,EXTERNAL://${KAFKA_EXTERNAL_IP}:${KAFKA_BROKER_1_PORT}
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT,EXTERNAL:SASL_PLAINTEXT
            KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
            KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
            KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka-1.${DOMAIN_NAME}:9093,2@kafka-2.${DOMAIN_NAME}:9093,3@kafka-3.${DOMAIN_NAME}:9093
            KAFKA_SASL_ENABLED_MECHANISMS: PLAIN
            KAFKA_LISTENER_NAME_EXTERNAL_PLAIN_SASL_JAAS_CONFIG: |
                org.apache.kafka.common.security.plain.PlainLoginModule required \
                username="${KAFKA_USERNAME}" \
                password="${KAFKA_PASSWORD}" \
                user_${KAFKA_USERNAME}="${KAFKA_PASSWORD}";
            KAFKA_JMX_PORT: 9997
        ports:
            - ${KAFKA_BROKER_1_PORT}:9094/tcp
        healthcheck:
            test: /opt/kafka/bin/kafka-topics.sh --list --bootstrap-server localhost:9092
            interval: 60s
            timeout: 10s
            retries: 3
            start_period: 1s
            start_interval: 1s
        depends_on:
            kafka-1:
                condition: service_healthy
            kafka-2:
                condition: service_healthy
            kafka-3:
                condition: service_healthy
        deploy:
            resources:
                limits:
                    memory: 384M

    kafka-5:
        image: docker.io/apache/kafka:4.0.0
        restart: unless-stopped
        container_name: kafka-5.${DOMAIN_NAME}
        hostname: kafka-5.${DOMAIN_NAME}
        environment:
            KAFKA_CLUSTER_ID: ${KAFKA_CLUSTER_ID}
            KAFKA_NODE_ID: 5
            KAFKA_PROCESS_ROLES: broker
            KAFKA_LISTENERS: INTERNAL://:9092,EXTERNAL://:9094
            KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-5.${DOMAIN_NAME}:9092,EXTERNAL://${KAFKA_EXTERNAL_IP}:${KAFKA_BROKER_2_PORT}
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT,EXTERNAL:SASL_PLAINTEXT
            KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
            KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
            KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka-1.${DOMAIN_NAME}:9093,2@kafka-2.${DOMAIN_NAME}:9093,3@kafka-3.${DOMAIN_NAME}:9093
            KAFKA_SASL_ENABLED_MECHANISMS: PLAIN
            KAFKA_LISTENER_NAME_EXTERNAL_PLAIN_SASL_JAAS_CONFIG: |
                org.apache.kafka.common.security.plain.PlainLoginModule required \
                username="${KAFKA_USERNAME}" \
                password="${KAFKA_PASSWORD}" \
                user_${KAFKA_USERNAME}="${KAFKA_PASSWORD}";
            KAFKA_JMX_PORT: 9997
        ports:
            - ${KAFKA_BROKER_2_PORT}:9094/tcp
        healthcheck:
            test: /opt/kafka/bin/kafka-topics.sh --list --bootstrap-server localhost:9092
            interval: 60s
            timeout: 10s
            retries: 3
            start_period: 1s
            start_interval: 1s
        depends_on:
            kafka-1:
                condition: service_healthy
            kafka-2:
                condition: service_healthy
            kafka-3:
                condition: service_healthy
        deploy:
            resources:
                limits:
                    memory: 384M

    kafka-6:
        image: docker.io/apache/kafka:4.0.0
        restart: unless-stopped
        container_name: kafka-6.${DOMAIN_NAME}
        hostname: kafka-6.${DOMAIN_NAME}
        environment:
            KAFKA_CLUSTER_ID: ${KAFKA_CLUSTER_ID}
            KAFKA_NODE_ID: 6
            KAFKA_PROCESS_ROLES: broker
            KAFKA_LISTENERS: INTERNAL://:9092,EXTERNAL://:9094
            KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-6.${DOMAIN_NAME}:9092,EXTERNAL://${KAFKA_EXTERNAL_IP}:${KAFKA_BROKER_3_PORT}
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT,EXTERNAL:SASL_PLAINTEXT
            KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
            KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
            KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka-1.${DOMAIN_NAME}:9093,2@kafka-2.${DOMAIN_NAME}:9093,3@kafka-3.${DOMAIN_NAME}:9093
            KAFKA_SASL_ENABLED_MECHANISMS: PLAIN
            KAFKA_LISTENER_NAME_EXTERNAL_PLAIN_SASL_JAAS_CONFIG: |
                org.apache.kafka.common.security.plain.PlainLoginModule required \
                username="${KAFKA_USERNAME}" \
                password="${KAFKA_PASSWORD}" \
                user_${KAFKA_USERNAME}="${KAFKA_PASSWORD}";
            KAFKA_JMX_PORT: 9997
        ports:
            - ${KAFKA_BROKER_3_PORT}:9094/tcp
        healthcheck:
            test: /opt/kafka/bin/kafka-topics.sh --list --bootstrap-server localhost:9092
            interval: 60s
            timeout: 10s
            retries: 3
            start_period: 1s
            start_interval: 1s
        depends_on:
            kafka-1:
                condition: service_healthy
            kafka-2:
                condition: service_healthy
            kafka-3:
                condition: service_healthy
        deploy:
            resources:
                limits:
                    memory: 384M

    kafka-7:
        image: docker.io/apache/kafka:4.0.0
        restart: unless-stopped
        container_name: kafka-7.${DOMAIN_NAME}
        hostname: kafka-7.${DOMAIN_NAME}
        environment:
            KAFKA_CLUSTER_ID: ${KAFKA_CLUSTER_ID}
            KAFKA_NODE_ID: 7
            KAFKA_PROCESS_ROLES: broker
            KAFKA_LISTENERS: INTERNAL://:9092,EXTERNAL://:9094
            KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-7.${DOMAIN_NAME}:9092,EXTERNAL://${KAFKA_EXTERNAL_IP}:${KAFKA_BROKER_4_PORT}
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT,EXTERNAL:SASL_PLAINTEXT
            KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
            KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
            KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka-1.${DOMAIN_NAME}:9093,2@kafka-2.${DOMAIN_NAME}:9093,3@kafka-3.${DOMAIN_NAME}:9093
            KAFKA_SASL_ENABLED_MECHANISMS: PLAIN
            KAFKA_LISTENER_NAME_EXTERNAL_PLAIN_SASL_JAAS_CONFIG: |
                org.apache.kafka.common.security.plain.PlainLoginModule required \
                username="${KAFKA_USERNAME}" \
                password="${KAFKA_PASSWORD}" \
                user_${KAFKA_USERNAME}="${KAFKA_PASSWORD}";
            KAFKA_JMX_PORT: 9997
        ports:
            - ${KAFKA_BROKER_4_PORT}:9094/tcp
        healthcheck:
            test: /opt/kafka/bin/kafka-topics.sh --list --bootstrap-server localhost:9092
            interval: 60s
            timeout: 10s
            retries: 3
            start_period: 1s
            start_interval: 1s
        depends_on:
            kafka-1:
                condition: service_healthy
            kafka-2:
                condition: service_healthy
            kafka-3:
                condition: service_healthy
        deploy:
            resources:
                limits:
                    memory: 384M

    # ----- Kafka UI -----
    kafka-ui:
        image: ghcr.io/kafbat/kafka-ui:v1.2.0
        restart: unless-stopped
        container_name: kafka-ui.${DOMAIN_NAME}
        hostname: kafka-ui.${DOMAIN_NAME}
        read_only: true
        environment:
            KAFKA_CLUSTERS_0_NAME: ${KAFKA_CLUSTER_NAME}
            KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka-4.${DOMAIN_NAME}:9092,kafka-5.${DOMAIN_NAME}:9092,kafka-6.${DOMAIN_NAME}:9092,kafka-7.${DOMAIN_NAME}:9092
            KAFKA_CLUSTERS_0_METRICS_PORT: 9997
            KAFKA_CLUSTERS_0_METRICS_TYPE: JMX
            DYNAMIC_CONFIG_ENABLED: true
        ports:
            - "25280:8080"
        depends_on:
            kafka-4:
                condition: service_healthy
            kafka-5:
                condition: service_healthy
            kafka-6:
                condition: service_healthy
            kafka-7:
                condition: service_healthy
        deploy:
            resources:
                limits:
                    memory: 256M

    # ----- Private Certificate Authority Server --------------------------------------------------
    pki:
        image: remal-private-ca:0.6.2
        container_name: pki.${DOMAIN_NAME}
        hostname: pki.${DOMAIN_NAME}
        ports:
            - "12012:22"   # SSH
        environment:
            - EASYRSA_REQ_CN=${DOMAIN_NAME}
            - EASYRSA_REQ_COUNTRY=${EASYRSA_REQ_COUNTRY}
            - EASYRSA_REQ_PROVINCE=${EASYRSA_REQ_PROVINCE}
            - EASYRSA_REQ_CITY=${EASYRSA_REQ_CITY}
            - EASYRSA_REQ_ORG=${EASYRSA_REQ_ORG}
        deploy:
            resources:
                limits:
                    memory: 64M
