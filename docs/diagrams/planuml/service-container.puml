' ******************************************************************************
' UML PlantUML diagram that shows the java-runner Remal Docker container
' dependencies.
'
' Since:  March 2024
' Author: Arnold Somogyi <arnold.somogyi@gmail.com>
'
' Copyright (c) 2020-2025 Remal Software and Arnold Somogyi All rights reserved
' ******************************************************************************
@startuml

<style>
  .STYLE_KV_STORE {
    RoundCorner 20
    LineThickness 2
    LineColor Sienna
    BackgroundColor BurlyWood
  }
  .STYLE_PKI {
    RoundCorner 20
    LineThickness 2
    LineColor GoldenRod
    BackgroundColor Gold
  }
  .STYLE_DB {
    RoundCorner 20
    LineThickness 2
    LineColor SteelBlue
    BackgroundColor PaleTurquoise
  }
  .STYLE_APP {
    RoundCorner 20
    LineThickness 2
    LineColor Purple
    BackgroundColor HotPink
  }
  .STYLE_APP_CONTAINER {
    RoundCorner 20
    LineThickness 2
    LineColor SteelBlue
    BackgroundColor Pink
  }
  .STYLE_MONITOR {
    RoundCorner 20
    LineThickness 2
    LineColor Green
    BackgroundColor GreenYellow
  }
  .STYLE_MESSAGING {
    RoundCorner 20
    LineThickness 2
    LineColor DarkTurquoise
    BackgroundColor Aqua
  }
</style>

skinparam defaultTextAlignment center
title **Remal java-runner Docker container dependencies**

sprite $PKI           jar:archimate/business-interaction
sprite $KV_STORE      jar:archimate/business-interface
sprite $DB            jar:archimate/application-data-object
sprite $APP           jar:archimate/physical-equipment
sprite $APP_CONTAINER jar:archimate/physical-equipment
sprite $MONITOR       jar:archimate/strategy-capability
sprite $MESSAGING     jar:archimate/junction


node          "Java Runner"                    as java_runner     <<$APP_CONTAINER>> <<STYLE_APP_CONTAINER>> {
   component  "User Service\nJAR"              as rest_service    <<$APP>>           <<STYLE_APP>>
   component  "Hashicorp Consul Agent\nClient" as consul_client   <<$KV_STORE>>      <<STYLE_KV_STORE>>
   component  "PostgreSQL"                     as postgresql      <<$DB>>            <<STYLE_DB>>
   portin     "GET\nrest"                      as rest_service_i1
   portin     "POST\nrest"                     as rest_service_i2
}
node          "Prometheus"                     as prometheus      <<$MONITOR>>       <<STYLE_MONITOR>>
node          "Grafana"                        as grafana          <<$MONITOR>>       <<STYLE_MONITOR>>
node          "Private PKI"                    as pki             <<$PKI>>           <<STYLE_PKI>>
node          "Hashicorp Consul Agent\nServer" as consul_server   <<$KV_STORE>>      <<STYLE_KV_STORE>>
node          "Zookeeper"                      as zookeeper       <<$MESSAGING>>     <<STYLE_MESSAGING>>
node          "Kafka"                          as kafka           <<$MESSAGING>>     <<STYLE_MESSAGING>>


consul_server    <..> pki             : generate\ncertificate
java_runner      <--> pki             : generate\ncertificate
prometheus       <..> pki             : generate\ncertificate
grafana          <..> pki             : generate\ncertificate
   consul_client  ..> consul_server
   rest_service  <--> postgresql
   rest_service   --> consul_client   : service discovery\\\ndistributed configuration
   rest_service   --> rest_service_i1
   rest_service   --> rest_service_i2
prometheus       ...> rest_service
grafana           ..> prometheus
prometheus        ..> consul_server   : get the URL\n of services\nto monitor
zookeeper       <..>  kafka
kafka           <..>  rest_service
@enduml
